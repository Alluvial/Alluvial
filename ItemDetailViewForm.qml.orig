import QtQuick 2.4
import QtQuick.Controls 1.2
import QtQuick.Layouts 1.1
import Alluvial.Globals 1.0

Item {
    id: listView
    transformOrigin: Item.Center

    property string hexcolor: "#5599FF"

    Rectangle {
        anchors.fill: parent
        color: hexcolor
    }

    QtObject {
        id: songMeta
        property string hash: Globals.hash
        property string songName: Globals.songName
        property string album: Globals.album
        property string albumArt: Globals.albumArt
        property string artist: Globals.artist
        property int length: Globals.length
        property double size: Globals.size

        onHashChanged: {
            songName: Globals.songName
            album: Globals.album
            albumArt: Globals.albumArt
            artist: Globals.artist
            length: Globals.length
            size: Globals.size
        }
    }

    ColumnLayout {
        anchors.fill:parent

        states: [
            State {
                name: 'updateSong'
                PropertyChanges {
                    target: songMeta
                    hash: Globals.hash
                    songName: Globals.songName
                    album: Globals.album
                    albumArt: Globals.albumArt
                    artist: Globals.artist
                    length: Globals.length
                    size: Globals.size
                }
            }
        ]

        Rectangle {
            id: albumDetail
            anchors.top: parent.top
            anchors.topMargin: parent.height * 0.05
<<<<<<< HEAD
            anchors.fill: parent
            anchors.bottomMargin: parent.height * 0.05
=======
            height: parent.height * 0.5
            width: parent.width
            color: "transparent"
>>>>>>> dbc3516a3438e59d9370232f3488c8eac86de54b

            Image {
                id: albumArt
                source: songMeta.albumArt
                fillMode: Image.PreserveAspectFit
<<<<<<< HEAD
                height: parent.height - artistText.height - albumText.height - songText.height - spacer.height
                anchors.left: parent.left
                anchors.right: parent.right
                anchors.leftMargin: parent.width * 0.05
                anchors.rightMargin: parent.width * 0.05
            }

            Rectangle {
                id: spacer
                anchors.bottom: songText.top
                height: songText.height
            }

            Text {
                id: songText
                anchors.bottom: artistText.top
                x: parent.width * 0.5 - this.width * 0.5
                text: "Song: " + songMeta.songName
                font.bold: true
                font.pixelSize: 16
=======
                height: parent.height - artistText.height - albumText.height
                width: parent.width

>>>>>>> dbc3516a3438e59d9370232f3488c8eac86de54b
            }

            Text {
                id: artistText
                anchors.bottom: albumText.top
                x: parent.width * 0.5 - this.width * 0.5
                text: "Artist: " + songMeta.artist
                font.pixelSize: 16
            }

            Text {
                id: albumText
                anchors.bottom: parent.bottom
                x: parent.width * 0.5 - this.width * 0.5
                text: "Album: " + songMeta.album
                font.family: "Arial"
                font.pixelSize: 16
            }
        }
<<<<<<< HEAD
=======

        Rectangle {
            id: songListBackground
            anchors.bottom: parent.bottom
            anchors.left: parent.left
            anchors.right: parent.right
            height: parent.height * 0.4
            color: "transparent"

            ColumnLayout {
                id:trackListView
                anchors.fill: parent

                ListModel {
                    id: trackListing
                    ListElement {
                        name: "Grey"
                        colorCode: "grey"
                    }

                    ListElement {
                        name: "Red"
                        colorCode: "red"
                    }

                    ListElement {
                        name: "Blue"
                        colorCode: "blue"
                    }

                    ListElement {
                        name: "Green"
                        colorCode: "green"
                    }
                }

                Component {
                    id: songDelegate
                    Row {
                        x: parent.width * 0.1
                        height: trackName.height
                        width: parent.width * 0.8

                        Rectangle {
                            width: parent.width
                            height: parent.height
                            color: colorCode

                            Text {
                                id: trackName
                                x: parent.x
                                text: name
                                font.pixelSize: 20
                            }
                        }

                    }
                }

                ListView {
                    id: songList
                    //flickableDirection: Flickable.HorizontalAndVerticalFlick
                    anchors.fill: parent
                    delegate: songDelegate
                    model: trackListing
                }
            }
        }
>>>>>>> dbc3516a3438e59d9370232f3488c8eac86de54b
    }
    function findBGColor(){
        var img = albumArt;


    }
}

